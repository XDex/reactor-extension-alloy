diff --git a/node_modules/parcel-bundler/lib/Asset.js b/node_modules/parcel-bundler/lib/Asset.js
index d476af0..92cfd3f 100644
--- a/node_modules/parcel-bundler/lib/Asset.js
+++ b/node_modules/parcel-bundler/lib/Asset.js
@@ -325,7 +325,10 @@ class Asset {
                 name = _step$value[0],
                 map = _step$value[1];
 
-            newValue = newValue.split(name).join(map);
+            const newBundlePath = this.convertToUnixStyleDirectorySeparators(
+              this.makeBundlePathRelativeToParentBundle(map)
+            );
+            newValue = newValue.split(name).join(newBundlePath);
           } // Copy `this.generated` on write so we don't end up writing the final names to the cache.
 
         } catch (err) {
@@ -353,6 +356,34 @@ class Asset {
     }
   }
 
+  makeBundlePathRelativeToParentBundle(bundlePath) {
+    if (path.isAbsolute(bundlePath)) {
+      return bundlePath;
+    }
+    if (!this.options || !this.options.publicURL) {
+      return bundlePath;
+    }
+    const urlPath = URL.parse(this.options.publicURL).path;
+    if (path.isAbsolute(urlPath)) {
+      return bundlePath;
+    }
+
+    // contentHash true or false does not matter because
+    // we only use the directory part of the path.
+    const parentBundleRelativePath = this.parentBundle.getHashedBundleName();
+    const parentBundleRelativeDir =
+      path.dirname(parentBundleRelativePath) || '.';
+    const relativeBundlePath = path.relative(
+      parentBundleRelativeDir,
+      bundlePath
+    );
+    return relativeBundlePath;
+  }
+
+  convertToUnixStyleDirectorySeparators(bundlePath) {
+    return bundlePath.replace(/\\/g, '/');
+  }
+
   generateErrorMessage(err) {
     return err;
   }
